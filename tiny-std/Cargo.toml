[package]
name = "tiny-std"
version = "0.1.1"
edition = "2021"
license = "MPL-2.0"
readme = "../Readme.md"
repository = "https://github.com/MarcusGrass/tiny-std"
homepage = "https://github.com/MarcusGrass/tiny-std"
description = "Tiny rust stdlib for linux"
documentation = "https://docs.rs/tiny-std"
categories = ["external-ffi-bindings", "no-std", "os"]
keywords = ["ffi", "bindings", "operating", "system", "linux"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["alloc"]
# With an allocator, needs to be provided,
alloc = ["rusl/alloc"]

allocator-provided = []

global-allocator = ["allocator-provided"]

# Pulls in all features to make an executable that works as expected (env etc), std-incompatible
executable = ["start", "symbols", "aux", "vdso"]

# Pulls in features that enable functionality without making std-incompatible
library = ["start"]

# Lib sections of things dependant of start files
start = ["tiny-start/start"]
# Symbols required for properly using start parts, becomes incompatible with stdlib if activated
symbols = ["tiny-start/mem-symbols"]
# Pull in aux values in the program entrypoint
aux = ["start", "tiny-start/aux"]
# Try to pull in get_time through the VDSO in the program entrypoint
vdso = ["aux"]

threaded = ["alloc", "start"]

[dependencies]
rusl = { path = "../rusl" , default-features = false }
tiny-start = { path = "../tiny-start", default-features = false, optional = true }
sc = "0.2.7"
unix-print = "0.1.0"
